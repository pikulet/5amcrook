"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.selectEditingDraft = exports.selectMediaFilePublicPath = exports.selectMediaFilePath = exports.selectMediaFolder = exports.selectEntries = exports.selectPublishedSlugs = exports.selectEntry = void 0;

var _immutable = require("immutable");

var _path = require("path");

var _entries = require("../actions/entries");

var _search = require("../actions/search");

var _src = require("netlify-cms-lib-util/src");

let collection;
let loadedEntries;
let append;
let page;
let slug;

const entries = function entries() {
  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _immutable.Map)({
    entities: (0, _immutable.Map)(),
    pages: (0, _immutable.Map)()
  });
  let action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case _entries.ENTRY_REQUEST:
      {
        const payload = action.payload;
        return state.setIn(['entities', "".concat(payload.collection, ".").concat(payload.slug), 'isFetching'], true);
      }

    case _entries.ENTRY_SUCCESS:
      {
        const payload = action.payload;
        collection = payload.collection;
        slug = payload.entry.slug;
        return state.withMutations(map => {
          map.setIn(['entities', "".concat(collection, ".").concat(slug)], (0, _immutable.fromJS)(payload.entry));
          const ids = map.getIn(['pages', collection, 'ids'], (0, _immutable.List)());

          if (!ids.includes(slug)) {
            map.setIn(['pages', collection, 'ids'], ids.unshift(slug));
          }
        });
      }

    case _entries.ENTRIES_REQUEST:
      {
        const payload = action.payload;
        return state.setIn(['pages', payload.collection, 'isFetching'], true);
      }

    case _entries.ENTRIES_SUCCESS:
      {
        const payload = action.payload;
        collection = payload.collection;
        loadedEntries = payload.entries;
        append = payload.append;
        page = payload.page;
        return state.withMutations(map => {
          loadedEntries.forEach(entry => map.setIn(['entities', "".concat(collection, ".").concat(entry.slug)], (0, _immutable.fromJS)(entry).set('isFetching', false)));
          const ids = (0, _immutable.List)(loadedEntries.map(entry => entry.slug));
          map.setIn(['pages', collection], (0, _immutable.Map)({
            page,
            ids: append ? map.getIn(['pages', collection, 'ids'], (0, _immutable.List)()).concat(ids) : ids
          }));
        });
      }

    case _entries.ENTRIES_FAILURE:
      return state.setIn(['pages', action.meta.collection, 'isFetching'], false);

    case _entries.ENTRY_FAILURE:
      {
        const payload = action.payload;
        return state.withMutations(map => {
          map.setIn(['entities', "".concat(payload.collection, ".").concat(payload.slug), 'isFetching'], false);
          map.setIn(['entities', "".concat(payload.collection, ".").concat(payload.slug), 'error'], payload.error.message);
        });
      }

    case _search.SEARCH_ENTRIES_SUCCESS:
      {
        const payload = action.payload;
        loadedEntries = payload.entries;
        return state.withMutations(map => {
          loadedEntries.forEach(entry => map.setIn(['entities', "".concat(entry.collection, ".").concat(entry.slug)], (0, _immutable.fromJS)(entry).set('isFetching', false)));
        });
      }

    case _entries.ENTRY_DELETE_SUCCESS:
      {
        const payload = action.payload;
        return state.withMutations(map => {
          map.deleteIn(['entities', "".concat(payload.collectionName, ".").concat(payload.entrySlug)]);
          map.updateIn(['pages', payload.collectionName, 'ids'], ids => ids.filter(id => id !== payload.entrySlug));
        });
      }

    default:
      return state;
  }
};

const selectEntry = (state, collection, slug) => state.getIn(['entities', "".concat(collection, ".").concat(slug)]);

exports.selectEntry = selectEntry;

const selectPublishedSlugs = (state, collection) => state.getIn(['pages', collection, 'ids'], (0, _immutable.List)());

exports.selectPublishedSlugs = selectPublishedSlugs;

const selectEntries = (state, collection) => {
  const slugs = selectPublishedSlugs(state, collection);
  return slugs && slugs.map(slug => selectEntry(state, collection, slug));
};

exports.selectEntries = selectEntries;
const DRAFT_MEDIA_FILES = 'DRAFT_MEDIA_FILES';

const selectMediaFolder = (config, collection, entryPath) => {
  let mediaFolder = config.get('media_folder');

  if (collection && collection.has('media_folder')) {
    if (entryPath) {
      const entryDir = (0, _path.dirname)(entryPath);
      mediaFolder = (0, _path.join)(entryDir, collection.get('media_folder'));
    } else {
      mediaFolder = (0, _path.join)(collection.get('folder'), DRAFT_MEDIA_FILES);
    }
  }

  return mediaFolder;
};

exports.selectMediaFolder = selectMediaFolder;

const selectMediaFilePath = (config, collection, entryPath, mediaPath) => {
  if ((0, _src.isAbsolutePath)(mediaPath)) {
    return mediaPath;
  }

  let mediaFolder;

  if (mediaPath.startsWith('/')) {
    // absolute media paths are not bound to a collection
    mediaFolder = selectMediaFolder(config, null, null);
  } else {
    mediaFolder = selectMediaFolder(config, collection, entryPath);
  }

  return (0, _path.join)(mediaFolder, (0, _src.basename)(mediaPath));
};

exports.selectMediaFilePath = selectMediaFilePath;

const selectMediaFilePublicPath = (config, collection, mediaPath) => {
  if ((0, _src.isAbsolutePath)(mediaPath)) {
    return mediaPath;
  }

  let publicFolder = config.get('public_folder');

  if (collection && collection.has('public_folder')) {
    publicFolder = collection.get('public_folder');
  }

  return (0, _path.join)(publicFolder, (0, _src.basename)(mediaPath));
};

exports.selectMediaFilePublicPath = selectMediaFilePublicPath;

const selectEditingDraft = state => {
  const entry = state.get('entry');
  const workflowDraft = entry && !entry.isEmpty();
  return workflowDraft;
};

exports.selectEditingDraft = selectEditingDraft;
var _default = entries;
exports.default = _default;